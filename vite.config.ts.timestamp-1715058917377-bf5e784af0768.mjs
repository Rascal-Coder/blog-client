// vite.config.ts
import { defineConfig, loadEnv } from "file:///C:/Users/17559/Desktop/qiyuhang/blog-client/node_modules/.pnpm/vite@5.2.8_@types+node@20.12.6_sass@1.75.0/node_modules/vite/dist/node/index.js";
import { fileURLToPath, URL } from "node:url";
import process3 from "node:process";

// build/plugins/unocss.ts
import process from "node:process";
import path from "node:path";
import unocss from "file:///C:/Users/17559/Desktop/qiyuhang/blog-client/node_modules/.pnpm/@unocss+vite@0.59.0_vite@5.2.8/node_modules/@unocss/vite/dist/index.mjs";
import presetIcons from "file:///C:/Users/17559/Desktop/qiyuhang/blog-client/node_modules/.pnpm/@unocss+preset-icons@0.59.0/node_modules/@unocss/preset-icons/dist/index.mjs";
import { FileSystemIconLoader as fileSystemIconLoader } from "file:///C:/Users/17559/Desktop/qiyuhang/blog-client/node_modules/.pnpm/@iconify+utils@2.1.22/node_modules/@iconify/utils/lib/loader/node-loaders.mjs";
function setupUnocss(viteEnv) {
  const { VITE_ICON_PREFIX, VITE_ICON_LOCAL_PREFIX } = viteEnv;
  const localIconPath = path.join(process.cwd(), "src/assets/svg-icon");
  const collectionName = VITE_ICON_LOCAL_PREFIX.replace(`${VITE_ICON_PREFIX}-`, "");
  return unocss({
    presets: [
      presetIcons({
        prefix: `${VITE_ICON_PREFIX}-`,
        scale: 1,
        extraProperties: {
          display: "inline-block"
        },
        collections: {
          [collectionName]: fileSystemIconLoader(localIconPath, (svg) => {
            return svg.replace(/^<svg\s/, '<svg width="1em" height="1em" ');
          })
        },
        warn: true
      })
    ]
  });
}

// build/plugins/react.ts
import react from "file:///C:/Users/17559/Desktop/qiyuhang/blog-client/node_modules/.pnpm/@vitejs+plugin-react@4.2.1_vite@5.2.8/node_modules/@vitejs/plugin-react/dist/index.mjs";
function setupReact(viteEnv) {
  return react({
    jsxImportSource: "@emotion/react",
    babel: {
      plugins: ["@emotion/babel-plugin"]
    }
  });
}

// build/plugins/unplugin.ts
import process2 from "node:process";
import path2 from "node:path";
import Icons from "file:///C:/Users/17559/Desktop/qiyuhang/blog-client/node_modules/.pnpm/unplugin-icons@0.18.5/node_modules/unplugin-icons/dist/vite.js";
import { FileSystemIconLoader } from "file:///C:/Users/17559/Desktop/qiyuhang/blog-client/node_modules/.pnpm/unplugin-icons@0.18.5/node_modules/unplugin-icons/dist/loaders.js";
import { createSvgIconsPlugin } from "file:///C:/Users/17559/Desktop/qiyuhang/blog-client/node_modules/.pnpm/vite-plugin-svg-icons@2.0.1_vite@5.2.8/node_modules/vite-plugin-svg-icons/dist/index.mjs";
function setupUnplugin(viteEnv) {
  const { VITE_ICON_PREFIX, VITE_ICON_LOCAL_PREFIX } = viteEnv;
  const localIconPath = path2.join(process2.cwd(), "src/assets/svg-icon");
  const collectionName = VITE_ICON_LOCAL_PREFIX.replace(`${VITE_ICON_PREFIX}-`, "");
  const plugins = [
    Icons({
      compiler: "jsx",
      jsx: "react",
      customCollections: {
        [collectionName]: FileSystemIconLoader(
          localIconPath,
          (svg) => svg.replace(/^<svg\s/, '<svg width="1em" height="1em" ')
        )
      },
      scale: 1,
      defaultClass: "inline-block"
    }),
    createSvgIconsPlugin({
      iconDirs: [localIconPath],
      symbolId: `${VITE_ICON_LOCAL_PREFIX}-[dir]-[name]`,
      inject: "body-last",
      customDomId: "__SVG_ICON_LOCAL__"
    })
  ];
  return plugins;
}

// build/plugins/index.ts
function setupVitePlugins(viteEnv) {
  const plugins = [setupReact(), setupUnocss(viteEnv), ...setupUnplugin(viteEnv)];
  return plugins;
}

// vite.config.ts
var __vite_injected_original_import_meta_url = "file:///C:/Users/17559/Desktop/qiyuhang/blog-client/vite.config.ts";
var vite_config_default = defineConfig((configEnv) => {
  const viteEnv = loadEnv(configEnv.mode, process3.cwd());
  return {
    resolve: {
      alias: {
        "~": fileURLToPath(new URL("./src/components", __vite_injected_original_import_meta_url)),
        "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
      }
    },
    plugins: setupVitePlugins(viteEnv),
    server: {
      host: "0.0.0.0",
      port: 9527
      // proxy
    },
    preview: {
      port: 9725
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
